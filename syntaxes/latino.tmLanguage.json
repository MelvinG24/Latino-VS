{
	"information_for_contributors": ["This file has been converted from https://github.com/MelvinG24/Latino-TextMate/blob/master/Syntaxes/Latino.tmLanguage","If you want to provide a fix or improvement, please create a pull request against the original repository.","Once accepted there, we are happy to receive an update request."],
    "version": "1.0.0",
    "name": "Latino",
    "scopeName": "source.latino",
    "patterns": [{
        "begin": "\\b(?:(local)\\s+)?(funcion|fun)\\s*(?:\\s+([a-zA-Z_][a-zA-Z0-9_]*(?:([\\.:])[a-zA-Z_][a-zA-Z0-9_]*)?)\\s*)?(\\()",
        "beginCaptures": {
            "1": {"name": "storage.modifier.local.latino"},
            "2": {"name": "keyword.control.latino"},
            "3": {"name": "entity.name.function.latino"},
            "4": {"name": "punctuation.separator.parameter.latino"},
            "5": {"name": "punctuation.definition.parameters.begin.latino"}
        },
        "end": "\\)",
        "endCaptures": {
            "0": {"name": "punctuation.definition.parameters.end.latino"}
        },
        "name": "meta.function.latino",
        "patterns": [{
            "match": "[a-zA-Z_][a-zA-Z0-9_]*",
            "name": "variable.parameter.function.latino"
        }, {
            "match": ",",
            "name": "punctuation.separator.arguments.latino"
        }]
    }, {
        "match": "(?<![\\w\\d.])0[xX][0-9A-Fa-f]+(?![pPeE.0-9])",
        "name": "constant.numeric.integer.hexadecimal.latino"
    }, {
        "match": "(?<![\\w\\d.])0[xX][0-9A-Fa-f]+(\\.[0-9A-Fa-f]+)?([eE]-?\\d*)?([pP][-+]\\d+)?",
        "name": "constant.numeric.float.hexadecimal.latino"
    }, {
        "match": "(?<![\\w\\d.])\\d+(?![pPeE.0-9])",
        "name": "constant.numeric.integer.latino"
    }, {
        "match": "(?<![\\w\\d.])\\d+(\\.\\d+)?([eE]-?\\d*)?",
        "name": "constant.numeric.float.latino"
    }, {
        "begin": "'",
        "beginCaptures": {
            "0": {
                "name": "punctuation.definition.string.begin.latino"
            }
        },
        "end": "'",
        "endCaptures": {
            "0": {
                "name": "punctuation.definition.string.end.latino"
            }
        },
        "name": "string.quoted.single.latino",
        "patterns": [{
            "include": "#escaped_char"
        }]
    }, {
        "begin": "\"",
        "beginCaptures": {
            "0": {
                "name": "punctuation.definition.string.begin.latino"
            }
        },
        "end": "\"",
        "endCaptures": {
            "0": {
                "name": "punctuation.definition.string.end.latino"
            }
        },
        "name": "string.quoted.double.latino",
        "patterns": [{
            "include": "#escaped_char"
        }]
    }, {
        "begin": "(?<=\\.cdef)\\s*(\\[(=*)\\[)",
        "beginCaptures": {
            "0": {
                "name": "string.quoted.other.multiline.latino"
            },
            "1": {
                "name": "punctuation.definition.string.begin.latino"
            }
        },
        "contentName": "meta.embedded.latino",
        "end": "(\\]\\2\\])",
        "endCaptures": {
            "0": {
                "name": "string.quoted.other.multiline.latino"
            },
            "1": {
                "name": "punctuation.definition.string.end.latino"
            }
        },
        "patterns": [{
            "include": "source.c"
        }]
    }, {
        "begin": "(?<!--)\\[(=*)\\[",
        "beginCaptures": {
            "0": {
                "name": "punctuation.definition.string.begin.latino"
            }
        },
        "end": "\\]\\1\\]",
        "endCaptures": {
            "0": {
                "name": "punctuation.definition.string.end.latino"
            }
        },
        "name": "string.quoted.other.multiline.latino"
    }, {
        "captures": {
            "1": {
                "name": "punctuation.definition.comment.latino"
            }
        },
        "match": "\\A(#!).*$\\n?",
        "name": "comment.line.shebang.latino"
    }, {
        "begin": "(^[ \\t]+)?(?=#)",
        "beginCaptures": {
            "1": {
                "name": "punctuation.whitespace.comment.leading.latino"
            }
        },
        "end": "(?!\\G)((?!^)[ \\t]+\\n)?",
        "endCaptures": {
            "1": {
                "name": "punctuation.whitespace.comment.trailing.latino"
            }
        },
        "patterns": [{
            "begin": "--\\[(=*)\\[",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.comment.begin.latino"
                }
            },
            "end": "\\]\\1\\]",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.comment.end.latino"
                }
            },
            "name": "comment.block.latino"
        }, {
            "begin": "#",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.comment.latino"
                }
            },
            "end": "\\n",
            "name": "comment.line.double-dash.latino"
        }]
    }, {
        "captures": {
            "1": {
                "name": "keyword.control.goto.latino"
            },
            "2": {
                "name": "constant.other.placeholder.latino"
            }
        },
        "match": "\\b(goto)\\s+([a-zA-Z_][a-zA-Z0-9_]*)"
    }, {
        "captures": {
            "1": {
                "name": "punctuation.definition.label.begin.latino"
            },
            "2": {
                "name": "punctuation.definition.label.end.latino"
            }
        },
        "match": "(::)[a-zA-Z_][a-zA-Z0-9_]*(::)",
        "name": "constant.other.placeholder.latino"
    }, {
        "match": "\\b(si|fin|sino|elegir|caso|defecto|repetir|desde|hasta|mientras|funcion|retorno|retornar|osi|fun|ret)\\b",
        "name": "keyword.control.latino"
    }, {
        "match": "(?<![^.]\\.|:)\\b(cierto|verdadero|falso|nulo)\\b|(?<![.])\\.{3}(?!\\.)",
        "name": "constant.language.latino"
    }, {
        "match": "(?<![^.]\\.|:)\\b(esta)\\b",
        "name": "variable.language.self.latino"
    }, {
        "match": "(?<![^.]\\.|:)\\b[a-zA-Z0-9_]\\b(?=\\s*(?:[({\"']|\\[\\[))",
        "name": "support.function.latino"
    }, {
        "match": "(?<![^.]\\.|:)\\b(mate\\.(acos|asen|atan|cos|cosh|sen|senh|tan|tanh|exp|log|log10|raiz|techo|piso|abs|atan2|pot|frexp|ldexp|aleatorio)|sis\\.(dormir|ejecutar|pipe|fecha|salir|avisar|cwd|iraxy|tiempo|usuario)|cadena\\.(char|bytes|esta_vacia|longitud|minusculas|mayusculas|recortar|es_numerico|es_numero|es_alfa|invertir|ejecutar|concatenar|comparar|contiene|termina_con|es_igual|indice|encontrar|ultimo_indice|eliminar|separar|inicia_con|regex|match|insertar|rellenar_izquierda|rellenar_derecha|reemplazar|subcadena|formato)|paquete\\.(cargar)|lista\\.(invertir|agregar|extender|eliminar_indice|longitud|indice|encontrar|comparar|insertar|eliminar|contiene|concatenar|crear)|gc\\.(mostrar|limpiar)|archivo\\.(leer|lineas|ejecutar|poner|copiar|eliminar|crear|renombrar)|dic\\.(longitud|llaves|valores|vals))\\b(?=\\s*(?:[({\"']|\\[\\[))",
        "name": "support.function.library.latino"
    }, {
        "match": "\\b(&&|\\|\\||!)\\b",
        "name": "keyword.operator.latino"
    }, {
        "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=\\s*(?:[({\"']|\\[\\[))",
        "name": "support.function.any-method.latino"
    }, {
        "match": "(?<=[^.]\\.|:)\\b([a-zA-Z_][a-zA-Z0-9_]*)",
        "name": "variable.other.latino"
    }, {
        "match": "\\+|-|%|#|\\*|\\/|\\^|=?|~=|<=?|>=?|(?<!\\.)\\.{2}(?!\\.)",
        "name": "keyword.operator.latino"
    }],
    "repository": {
        "escaped_char": {
            "patterns": [{
                "match": "\\\\[abfnrtvz\\\\\"'\\n]",
                "name": "constant.character.escape.latino"
            }, {
                "match": "\\\\\\d{1,3}",
                "name": "constant.character.escape.byte.latino"
            }, {
                "match": "\\\\x[0-9A-Fa-f][0-9A-Fa-f]",
                "name": "constant.character.escape.byte.latino"
            }, {
                "match": "\\\\u\\{[0-9A-Fa-f]+\\}",
                "name": "constant.character.escape.unicode.latino"
            }, {
                "match": "\\\\.",
                "name": "invalid.illegal.character.escape.latino"
            }]
        }
    }
}